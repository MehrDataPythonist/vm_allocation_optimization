{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMh5Eo9Ot73Y9kU9YiOhHa7"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wzEcJRTidydI",
        "outputId": "6b1b3bb7-0b69-4b46-b740-defa66a9d135"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Optimal Solutions:\n"
          ]
        }
      ],
      "source": [
        "# =============================================================================\n",
        "# Code Authored by: Mehrdatapythonist\n",
        "# # File: vm_allocation_optimization.py\n",
        "# Version: 1.0\n",
        "# Created on: 2023-05-09\n",
        "# Last Updated: 2023-05-09\n",
        "# Description: Implementation of Genetic Algorithm and Cuckoo Search Algorithm\n",
        "#              for optimizing Virtual Machine (VM) allocation in a cloud\n",
        "#              computing environment, minimizing power consumption while\n",
        "#              maximizing reliability.\n",
        "# Contact: https://github.com/MehrDataPythonist\n",
        "# License:MIT License\n",
        "# =============================================================================\n",
        "import random\n",
        "import math\n",
        "import numpy as np\n",
        "\n",
        "class PM:\n",
        "    def __init__(self, mips, landa, pmax):\n",
        "        self.mips = mips\n",
        "        self.landa = landa\n",
        "        self.vmlist = []\n",
        "        self.pmax = pmax\n",
        "        self.pmin = pmax * 0.7\n",
        "\n",
        "class VM:\n",
        "    def __init__(self, mips, l):\n",
        "        self.mips = mips\n",
        "        self.l = l\n",
        "\n",
        "def calculate_energy_consumption(pm):\n",
        "    if len(pm.vmlist) == 0:\n",
        "        return pm.pmax * 0.7\n",
        "    else:\n",
        "        u_cpu = sum(vm.mips for vm in pm.vmlist) / pm.mips\n",
        "        return 0.7 * pm.pmax + (0.3 * pm.pmax * u_cpu)\n",
        "\n",
        "def calculate_vm_reliability(vm, pm):\n",
        "    lambda_vm = pm.landa * (vm.mips * 100 / pm.mips) * vm.l\n",
        "    return math.exp(-lambda_vm)\n",
        "\n",
        "def calculate_pm_reliability(pm):\n",
        "    return np.prod([calculate_vm_reliability(vm, pm) for vm in pm.vmlist])\n",
        "\n",
        "def calculate_fitness(solution, pms, vms):\n",
        "    psys = sum(calculate_energy_consumption(pms[i]) for i in range(len(pms)))\n",
        "    rdc = np.prod([calculate_pm_reliability(pms[i]) for i in range(len(pms))])\n",
        "    return psys, rdc\n",
        "\n",
        "def generate_initial_population(pop_size, num_pms, num_vms):\n",
        "    population = []\n",
        "    for _ in range(pop_size):\n",
        "        solution = [random.randint(0, num_pms - 1) for _ in range(num_vms)]\n",
        "        population.append(solution)\n",
        "    return population\n",
        "\n",
        "def selection(population, fitnesses, num_parents):\n",
        "    parents = []\n",
        "    for _ in range(num_parents):\n",
        "        candidates = random.sample(range(len(population)), tournament_size)\n",
        "        best_candidate = min(candidates, key=lambda i: fitnesses[i][0])\n",
        "        parents.append(population[best_candidate])\n",
        "    return parents\n",
        "\n",
        "def crossover(parents, offspring_size):\n",
        "    offspring = []\n",
        "    for _ in range(offspring_size):\n",
        "        parent1, parent2 = random.sample(parents, 2)\n",
        "        crossover_point = random.randint(1, len(parent1) - 1)\n",
        "        offspring1 = parent1[:crossover_point] + parent2[crossover_point:]\n",
        "        offspring2 = parent2[:crossover_point] + parent1[crossover_point:]\n",
        "        offspring.append(offspring1)\n",
        "        offspring.append(offspring2)\n",
        "    return offspring\n",
        "\n",
        "def mutation(offspring, mutation_rate):\n",
        "    for i in range(len(offspring)):\n",
        "        if random.random() < mutation_rate:\n",
        "            mutation_point = random.randint(0, len(offspring[i]) - 1)\n",
        "            offspring[i][mutation_point] = random.randint(0, num_pms - 1)\n",
        "    return offspring\n",
        "\n",
        "def levy_flight(dimension):\n",
        "    beta = 1.5\n",
        "    sigma = (math.gamma(1 + beta) * math.sin(math.pi * beta / 2) /\n",
        "             (math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n",
        "    u = np.random.normal(0, sigma, dimension)\n",
        "    v = np.random.normal(0, 1, dimension)\n",
        "    step = u / np.abs(v)**(1 / beta)\n",
        "    return step\n",
        "\n",
        "def cuckoo_search(population, fitnesses, num_cuckoos, pa):\n",
        "    cuckoos = []\n",
        "    for _ in range(num_cuckoos):\n",
        "        cuckoo = random.choice(population)\n",
        "        step_size = levy_flight(len(cuckoo))\n",
        "        new_cuckoo = np.clip(cuckoo + step_size, 0, num_pms - 1).astype(int)\n",
        "        cuckoos.append(new_cuckoo)\n",
        "\n",
        "    for i in range(len(cuckoos)):\n",
        "        j = random.randint(0, len(population) - 1)\n",
        "        if fitnesses[j][0] > calculate_fitness(cuckoos[i], pms, vms)[0]:\n",
        "            population[j] = cuckoos[i]\n",
        "            fitnesses[j] = calculate_fitness(cuckoos[i], pms, vms)\n",
        "\n",
        "    for i in range(len(population)):\n",
        "        if random.random() < pa:\n",
        "            population[i] = generate_initial_population(1, num_pms, num_vms)[0]\n",
        "            fitnesses[i] = calculate_fitness(population[i], pms, vms)\n",
        "\n",
        "    return population, fitnesses\n",
        "\n",
        "def pareto_front(fitnesses):\n",
        "    pareto = []\n",
        "    for i in range(len(fitnesses)):\n",
        "        is_dominated = False\n",
        "        for j in range(len(fitnesses)):\n",
        "            if i != j and fitnesses[j][0] <= fitnesses[i][0] and fitnesses[j][1] >= fitnesses[i][1]:\n",
        "                is_dominated = True\n",
        "                break\n",
        "        if not is_dominated:\n",
        "            pareto.append(i)\n",
        "    return pareto\n",
        "\n",
        "# Initialize the data center\n",
        "num_pms = 10\n",
        "num_vms = 50\n",
        "pms = [PM(random.randint(1000, 2000), random.uniform(0.001, 0.01), 1500) for _ in range(num_pms)]\n",
        "vms = [VM(random.randint(100, 500), random.uniform(0.1, 0.9)) for _ in range(num_vms)]\n",
        "\n",
        "# Genetic Algorithm parameters\n",
        "pop_size = 100\n",
        "num_generations = 100\n",
        "tournament_size = 5\n",
        "num_parents = 20\n",
        "offspring_size = 80\n",
        "mutation_rate = 0.1\n",
        "\n",
        "# Cuckoo Search parameters\n",
        "num_cuckoos = 20\n",
        "pa = 0.25\n",
        "\n",
        "# Initialize the population\n",
        "population = generate_initial_population(pop_size, num_pms, num_vms)\n",
        "fitnesses = [calculate_fitness(solution, pms, vms) for solution in population]\n",
        "\n",
        "# Run the hybrid algorithm\n",
        "for generation in range(num_generations):\n",
        "    # Genetic Algorithm\n",
        "    parents = selection(population, fitnesses, num_parents)\n",
        "    offspring = crossover(parents, offspring_size)\n",
        "    offspring = mutation(offspring, mutation_rate)\n",
        "    population.extend(offspring)\n",
        "    fitnesses.extend([calculate_fitness(solution, pms, vms) for solution in offspring])\n",
        "\n",
        "    # Cuckoo Search\n",
        "    population, fitnesses = cuckoo_search(population, fitnesses, num_cuckoos, pa)\n",
        "\n",
        "    # Update Pareto front\n",
        "    pareto = pareto_front(fitnesses)\n",
        "\n",
        "# Output the optimal solutions\n",
        "print(\"Optimal Solutions:\")\n",
        "for i in pareto:\n",
        "    print(\"Solution:\", population[i])\n",
        "    print(\"Energy Consumption (Psys):\", fitnesses[i][0])\n",
        "    print(\"Reliability (Rdc):\", fitnesses[i][1])\n",
        "    print()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "import math\n",
        "import numpy as np\n",
        "\n",
        "class PM:\n",
        "    def __init__(self, cpu, landa, pmax):\n",
        "        self.cpu = cpu\n",
        "        self.landa = landa\n",
        "        self.pmax = pmax\n",
        "        self.pmin = 0.7 * pmax\n",
        "        self.vms = []\n",
        "\n",
        "    def add_vm(self, vm):\n",
        "        self.vms.append(vm)\n",
        "\n",
        "    def remove_vm(self, vm):\n",
        "        self.vms.remove(vm)\n",
        "\n",
        "    def get_utilization(self):\n",
        "        return sum(vm.mips for vm in self.vms) / self.cpu\n",
        "\n",
        "    def get_power_consumption(self):\n",
        "        u = self.get_utilization()\n",
        "        if not self.vms:\n",
        "            return self.pmax\n",
        "        return 0.7 * self.pmax + 0.3 * self.pmax * u\n",
        "\n",
        "class VM:\n",
        "    def __init__(self, mips, l):\n",
        "        self.mips = mips\n",
        "        self.l = l\n",
        "\n",
        "def calculate_reliability(pm):\n",
        "    reliability = 1.0\n",
        "    for vm in pm.vms:\n",
        "        lvm = pm.landa * (vm.mips / pm.cpu) * vm.l\n",
        "        reliability *= math.exp(-lvm)\n",
        "    return reliability\n",
        "\n",
        "def evaluate_solution(solution, pms, vms):\n",
        "    for i, vm_index in enumerate(solution):\n",
        "        pm = pms[vm_index]\n",
        "        vm = vms[i]\n",
        "        pm.add_vm(vm)\n",
        "\n",
        "    power_consumption = sum(pm.get_power_consumption() for pm in pms)\n",
        "    reliability = math.prod(calculate_reliability(pm) for pm in pms)\n",
        "\n",
        "    for i, vm_index in enumerate(solution):\n",
        "        pm = pms[vm_index]\n",
        "        vm = vms[i]\n",
        "        pm.remove_vm(vm)\n",
        "\n",
        "    return power_consumption, reliability\n",
        "\n",
        "def genetic_algorithm(pms, vms, population_size, max_generations, mutation_rate):\n",
        "    def create_individual():\n",
        "        return [random.randint(0, len(pms) - 1) for _ in range(len(vms))]\n",
        "\n",
        "    def crossover(parent1, parent2):\n",
        "        crossover_point = random.randint(1, len(vms) - 1)\n",
        "        child1 = parent1[:crossover_point] + parent2[crossover_point:]\n",
        "        child2 = parent2[:crossover_point] + parent1[crossover_point:]\n",
        "        return child1, child2\n",
        "\n",
        "    def mutate(individual):\n",
        "        for i in range(len(individual)):\n",
        "            if random.random() < mutation_rate:\n",
        "                individual[i] = random.randint(0, len(pms) - 1)\n",
        "        return individual\n",
        "\n",
        "    population = [create_individual() for _ in range(population_size)]\n",
        "    best_solution = None\n",
        "    best_fitness = float('inf'), float('-inf')\n",
        "\n",
        "    for _ in range(max_generations):\n",
        "        fitness_values = [evaluate_solution(individual, pms, vms) for individual in population]\n",
        "        sorted_population = [x for _, x in sorted(zip(fitness_values, population), key=lambda x: x[0])]\n",
        "\n",
        "        best_individual = sorted_population[0]\n",
        "        best_individual_fitness = fitness_values[population.index(best_individual)]\n",
        "        if best_individual_fitness[0] < best_fitness[0] or (\n",
        "                best_individual_fitness[0] == best_fitness[0] and best_individual_fitness[1] > best_fitness[1]):\n",
        "            best_solution = best_individual\n",
        "            best_fitness = best_individual_fitness\n",
        "\n",
        "        parents = sorted_population[:population_size // 2]\n",
        "        offspring = []\n",
        "\n",
        "        while len(offspring) < population_size:\n",
        "            parent1, parent2 = random.sample(parents, 2)\n",
        "            child1, child2 = crossover(parent1, parent2)\n",
        "            child1 = mutate(child1)\n",
        "            child2 = mutate(child2)\n",
        "            offspring.append(child1)\n",
        "            offspring.append(child2)\n",
        "\n",
        "        population = offspring\n",
        "\n",
        "    return best_solution, best_fitness\n",
        "\n",
        "def cuckoo_search(pms, vms, population_size, max_iterations, pa):\n",
        "    def create_individual():\n",
        "        return [random.randint(0, len(pms) - 1) for _ in range(len(vms))]\n",
        "\n",
        "    def levy_flight(individual):\n",
        "        beta = 1.5\n",
        "        sigma = (math.gamma(1 + beta) * math.sin(math.pi * beta / 2) /\n",
        "                 (math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n",
        "        u = np.random.normal(0, sigma, size=len(individual))\n",
        "        v = np.random.normal(0, 1, size=len(individual))\n",
        "        step = u / np.abs(v) ** (1 / beta)\n",
        "        individual = np.clip(individual + step, 0, len(pms) - 1).astype(int)\n",
        "        return list(individual)\n",
        "\n",
        "    nests = [create_individual() for _ in range(population_size)]\n",
        "    best_solution = None\n",
        "    best_fitness = float('inf'), float('-inf')\n",
        "\n",
        "    for _ in range(max_iterations):\n",
        "        for i in range(len(nests)):\n",
        "            new_solution = levy_flight(nests[i])\n",
        "            new_fitness = evaluate_solution(new_solution, pms, vms)\n",
        "            if new_fitness[0] < best_fitness[0] or (\n",
        "                    new_fitness[0] == best_fitness[0] and new_fitness[1] > best_fitness[1]):\n",
        "                nests[i] = new_solution\n",
        "                best_solution = new_solution\n",
        "                best_fitness = new_fitness\n",
        "\n",
        "        abandoned_nests = [nest for nest in nests if random.random() < pa]\n",
        "        for nest in abandoned_nests:\n",
        "            new_solution = create_individual()\n",
        "            nests[nests.index(nest)] = new_solution\n",
        "\n",
        "    return best_solution, best_fitness\n",
        "\n",
        "# Example usage\n",
        "num_pms = 5\n",
        "num_vms = 10\n",
        "pms = [PM(random.randint(1000, 2000), random.uniform(0.001, 0.01), random.randint(100, 200)) for _ in range(num_pms)]\n",
        "vms = [VM(random.randint(100, 500), random.uniform(0.1, 0.9)) for _ in range(num_vms)]\n",
        "\n",
        "genetic_solution, genetic_fitness = genetic_algorithm(pms, vms, population_size=50, max_generations=100, mutation_rate=0.1)\n",
        "print(\"Genetic Algorithm:\")\n",
        "print(\"Best Solution:\", genetic_solution)\n",
        "print(\"Power Consumption:\", genetic_fitness[0])\n",
        "print(\"Reliability:\", genetic_fitness[1])\n",
        "\n",
        "cuckoo_solution, cuckoo_fitness = cuckoo_search(pms, vms, population_size=50, max_iterations=100, pa=0.25)\n",
        "print(\"\\nCuckoo Search:\")\n",
        "print(\"Best Solution:\", cuckoo_solution)\n",
        "print(\"Power Consumption:\", cuckoo_fitness[0])\n",
        "print(\"Reliability:\", cuckoo_fitness[1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LQQ-_OD-eFmw",
        "outputId": "160c89f5-8f83-45b6-a09e-049b6fe5a154"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Genetic Algorithm:\n",
            "Best Solution: [3, 3, 3, 3, 1, 3, 2, 0, 3, 4]\n",
            "Power Consumption: 627.5182997905933\n",
            "Reliability: 0.9961448157270492\n",
            "\n",
            "Cuckoo Search:\n",
            "Best Solution: [3, 3, 3, 1, 3, 3, 3, 2, 0, 4]\n",
            "Power Consumption: 631.8101155173005\n",
            "Reliability: 0.9962991096451737\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "import math\n",
        "import numpy as np\n",
        "\n",
        "class PM:\n",
        "    \"\"\"\n",
        "    Class representing a Physical Machine (PM).\n",
        "    \"\"\"\n",
        "    def __init__(self, cpu, landa, pmax):\n",
        "        \"\"\"\n",
        "        Initialize a PM object.\n",
        "        :param cpu: CPU capacity of the PM.\n",
        "        :param landa: Failure rate of the PM.\n",
        "        :param pmax: Maximum power consumption of the PM.\n",
        "        \"\"\"\n",
        "        self.cpu = cpu\n",
        "        self.landa = landa\n",
        "        self.pmax = pmax\n",
        "        self.pmin = 0.7 * pmax\n",
        "        self.vms = []\n",
        "\n",
        "    def add_vm(self, vm):\n",
        "        \"\"\"\n",
        "        Add a Virtual Machine (VM) to the PM.\n",
        "        :param vm: VM object to be added.\n",
        "        \"\"\"\n",
        "        self.vms.append(vm)\n",
        "\n",
        "    def remove_vm(self, vm):\n",
        "        \"\"\"\n",
        "        Remove a VM from the PM.\n",
        "        :param vm: VM object to be removed.\n",
        "        \"\"\"\n",
        "        self.vms.remove(vm)\n",
        "\n",
        "    def get_utilization(self):\n",
        "        \"\"\"\n",
        "        Calculate the utilization of the PM based on the allocated VMs.\n",
        "        :return: Utilization value.\n",
        "        \"\"\"\n",
        "        return sum(vm.mips for vm in self.vms) / self.cpu\n",
        "\n",
        "    def get_power_consumption(self):\n",
        "        \"\"\"\n",
        "        Calculate the power consumption of the PM based on its utilization.\n",
        "        :return: Power consumption value.\n",
        "        \"\"\"\n",
        "        u = self.get_utilization()\n",
        "        if not self.vms:\n",
        "            return self.pmax\n",
        "        return 0.7 * self.pmax + 0.3 * self.pmax * u\n",
        "\n",
        "class VM:\n",
        "    \"\"\"\n",
        "    Class representing a Virtual Machine (VM).\n",
        "    \"\"\"\n",
        "    def __init__(self, mips, l):\n",
        "        \"\"\"\n",
        "        Initialize a VM object.\n",
        "        :param mips: MIPS (Million Instructions Per Second) requirement of the VM.\n",
        "        :param l: Load factor of the VM.\n",
        "        \"\"\"\n",
        "        self.mips = mips\n",
        "        self.l = l\n",
        "\n",
        "def calculate_reliability(pm):\n",
        "    \"\"\"\n",
        "    Calculate the reliability of a PM based on the allocated VMs.\n",
        "    :param pm: PM object.\n",
        "    :return: Reliability value.\n",
        "    \"\"\"\n",
        "    reliability = 1.0\n",
        "    for vm in pm.vms:\n",
        "        lvm = pm.landa * (vm.mips / pm.cpu) * vm.l\n",
        "        reliability *= math.exp(-lvm)\n",
        "    return reliability\n",
        "\n",
        "def evaluate_solution(solution, pms, vms):\n",
        "    \"\"\"\n",
        "    Evaluate a solution by calculating the power consumption and reliability.\n",
        "    :param solution: List representing the allocation of VMs to PMs.\n",
        "    :param pms: List of PM objects.\n",
        "    :param vms: List of VM objects.\n",
        "    :return: Tuple containing power consumption and reliability.\n",
        "    \"\"\"\n",
        "    for i, vm_index in enumerate(solution):\n",
        "        pm = pms[vm_index]\n",
        "        vm = vms[i]\n",
        "        pm.add_vm(vm)\n",
        "\n",
        "    power_consumption = sum(pm.get_power_consumption() for pm in pms)\n",
        "    reliability = math.prod(calculate_reliability(pm) for pm in pms)\n",
        "\n",
        "    for i, vm_index in enumerate(solution):\n",
        "        pm = pms[vm_index]\n",
        "        vm = vms[i]\n",
        "        pm.remove_vm(vm)\n",
        "\n",
        "    return power_consumption, reliability\n",
        "\n",
        "def genetic_algorithm(pms, vms, population_size, max_generations, mutation_rate):\n",
        "    \"\"\"\n",
        "    Genetic Algorithm for optimizing VM allocation.\n",
        "    :param pms: List of PM objects.\n",
        "    :param vms: List of VM objects.\n",
        "    :param population_size: Size of the population.\n",
        "    :param max_generations: Maximum number of generations.\n",
        "    :param mutation_rate: Mutation rate.\n",
        "    :return: Tuple containing the best solution and its fitness values.\n",
        "    \"\"\"\n",
        "    def create_individual():\n",
        "        \"\"\"\n",
        "        Create an individual solution.\n",
        "        :return: List representing the allocation of VMs to PMs.\n",
        "        \"\"\"\n",
        "        return [random.randint(0, len(pms) - 1) for _ in range(len(vms))]\n",
        "\n",
        "    def crossover(parent1, parent2):\n",
        "        \"\"\"\n",
        "        Perform crossover between two parent solutions.\n",
        "        :param parent1: First parent solution.\n",
        "        :param parent2: Second parent solution.\n",
        "        :return: Tuple containing two offspring solutions.\n",
        "        \"\"\"\n",
        "        crossover_point = random.randint(1, len(vms) - 1)\n",
        "        child1 = parent1[:crossover_point] + parent2[crossover_point:]\n",
        "        child2 = parent2[:crossover_point] + parent1[crossover_point:]\n",
        "        return child1, child2\n",
        "\n",
        "    def mutate(individual):\n",
        "        \"\"\"\n",
        "        Perform mutation on an individual solution.\n",
        "        :param individual: Individual solution to be mutated.\n",
        "        :return: Mutated individual solution.\n",
        "        \"\"\"\n",
        "        for i in range(len(individual)):\n",
        "            if random.random() < mutation_rate:\n",
        "                individual[i] = random.randint(0, len(pms) - 1)\n",
        "        return individual\n",
        "\n",
        "    population = [create_individual() for _ in range(population_size)]\n",
        "    best_solution = None\n",
        "    best_fitness = float('inf'), float('-inf')\n",
        "\n",
        "    for _ in range(max_generations):\n",
        "        fitness_values = [evaluate_solution(individual, pms, vms) for individual in population]\n",
        "        sorted_population = [x for _, x in sorted(zip(fitness_values, population), key=lambda x: x[0])]\n",
        "\n",
        "        best_individual = sorted_population[0]\n",
        "        best_individual_fitness = fitness_values[population.index(best_individual)]\n",
        "        if best_individual_fitness[0] < best_fitness[0] or (\n",
        "                best_individual_fitness[0] == best_fitness[0] and best_individual_fitness[1] > best_fitness[1]):\n",
        "            best_solution = best_individual\n",
        "            best_fitness = best_individual_fitness\n",
        "\n",
        "        parents = sorted_population[:population_size // 2]\n",
        "        offspring = []\n",
        "\n",
        "        while len(offspring) < population_size:\n",
        "            parent1, parent2 = random.sample(parents, 2)\n",
        "            child1, child2 = crossover(parent1, parent2)\n",
        "            child1 = mutate(child1)\n",
        "            child2 = mutate(child2)\n",
        "            offspring.append(child1)\n",
        "            offspring.append(child2)\n",
        "\n",
        "        population = offspring\n",
        "\n",
        "    return best_solution, best_fitness\n",
        "\n",
        "def cuckoo_search(pms, vms, population_size, max_iterations, pa):\n",
        "    \"\"\"\n",
        "    Cuckoo Search Algorithm for optimizing VM allocation.\n",
        "    :param pms: List of PM objects.\n",
        "    :param vms: List of VM objects.\n",
        "    :param population_size: Size of the population.\n",
        "    :param max_iterations: Maximum number of iterations.\n",
        "    :param pa: Probability of abandoning a nest.\n",
        "    :return: Tuple containing the best solution and its fitness values.\n",
        "    \"\"\"\n",
        "    def create_individual():\n",
        "        \"\"\"\n",
        "        Create an individual solution.\n",
        "        :return: List representing the allocation of VMs to PMs.\n",
        "        \"\"\"\n",
        "        return [random.randint(0, len(pms) - 1) for _ in range(len(vms))]\n",
        "\n",
        "    def levy_flight(individual):\n",
        "        \"\"\"\n",
        "        Perform Levy flight to generate a new solution.\n",
        "        :param individual: Current solution.\n",
        "        :return: New solution generated by Levy flight.\n",
        "        \"\"\"\n",
        "        beta = 1.5\n",
        "        sigma = (math.gamma(1 + beta) * math.sin(math.pi * beta / 2) /\n",
        "                 (math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n",
        "        u = np.random.normal(0, sigma, size=len(individual))\n",
        "        v = np.random.normal(0, 1, size=len(individual))\n",
        "        step = u / np.abs(v) ** (1 / beta)\n",
        "        individual = np.clip(individual + step, 0, len(pms) - 1).astype(int)\n",
        "        return list(individual)\n",
        "\n",
        "    nests = [create_individual() for _ in range(population_size)]\n",
        "    best_solution = None\n",
        "    best_fitness = float('inf'), float('-inf')\n",
        "\n",
        "    for _ in range(max_iterations):\n",
        "        for i in range(len(nests)):\n",
        "            new_solution = levy_flight(nests[i])\n",
        "            new_fitness = evaluate_solution(new_solution, pms, vms)\n",
        "            if new_fitness[0] < best_fitness[0] or (\n",
        "                    new_fitness[0] == best_fitness[0] and new_fitness[1] > best_fitness[1]):\n",
        "                nests[i] = new_solution\n",
        "                best_solution = new_solution\n",
        "                best_fitness = new_fitness\n",
        "\n",
        "        abandoned_nests = [nest for nest in nests if random.random() < pa]\n",
        "        for nest in abandoned_nests:\n",
        "            new_solution = create_individual()\n",
        "            nests[nests.index(nest)] = new_solution\n",
        "\n",
        "    return best_solution, best_fitness\n",
        "\n",
        "# Example usage\n",
        "num_pms = 5\n",
        "num_vms = 10\n",
        "pms = [PM(random.randint(1000, 2000), random.uniform(0.001, 0.01), random.randint(100, 200)) for _ in range(num_pms)]\n",
        "vms = [VM(random.randint(100, 500), random.uniform(0.1, 0.9)) for _ in range(num_vms)]\n",
        "\n",
        "genetic_solution, genetic_fitness = genetic_algorithm(pms, vms, population_size=50, max_generations=100, mutation_rate=0.1)\n",
        "print(\"Genetic Algorithm:\")\n",
        "print(\"Best Solution:\", genetic_solution)\n",
        "print(\"Power Consumption:\", genetic_fitness[0])\n",
        "print(\"Reliability:\", genetic_fitness[1])\n",
        "\n",
        "cuckoo_solution, cuckoo_fitness = cuckoo_search(pms, vms, population_size=50, max_iterations=100, pa=0.25)\n",
        "print(\"\\nCuckoo Search:\")\n",
        "print(\"Best Solution:\", cuckoo_solution)\n",
        "print(\"Power Consumption:\", cuckoo_fitness[0])\n",
        "print(\"Reliability:\", cuckoo_fitness[1])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FLtqmG3mffYL",
        "outputId": "5987d1f9-d165-4a67-f355-81371076bc93"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Genetic Algorithm:\n",
            "Best Solution: [3, 3, 3, 4, 3, 2, 1, 3, 0, 3]\n",
            "Power Consumption: 629.4836452662408\n",
            "Reliability: 0.9959684673590158\n",
            "\n",
            "Cuckoo Search:\n",
            "Best Solution: [1, 3, 3, 0, 1, 2, 3, 1, 3, 4]\n",
            "Power Consumption: 633.1709868457277\n",
            "Reliability: 0.9957474351346634\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "The comments provide a clear explanation of each class, function, and their respective parameters and return values. Here's a summary of the code:\n",
        "\n",
        "- The `PM` class represents a Physical Machine (PM) with attributes such as CPU capacity, failure rate, power consumption, and allocated VMs.\n",
        "- The `VM` class represents a Virtual Machine (VM) with attributes such as MIPS requirement and load factor.\n",
        "- The `calculate_reliability` function calculates the reliability of a PM based on the allocated VMs.\n",
        "- The `evaluate_solution` function evaluates a solution by calculating the power consumption and reliability.\n",
        "- The `genetic_algorithm` function implements the Genetic Algorithm for optimizing VM allocation. It includes functions for creating individuals, performing crossover, mutation, and selection.\n",
        "- The `cuckoo_search` function implements the Cuckoo Search Algorithm for optimizing VM allocation. It includes functions for creating individuals, performing Levy flight, and abandoning nests.\n",
        "- The example usage section demonstrates how to create random PMs and VMs and run the Genetic Algorithm and Cuckoo Search Algorithm with specific parameters.\n",
        "\n",
        "The comments provide a clear understanding of each component of the code and its purpose. They also help in maintaining and modifying the code in the future."
      ],
      "metadata": {
        "id": "CcFV3UjCfrue"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}